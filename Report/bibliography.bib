% Encoding: UTF-8

%%%
%
%Beim Erstellen der Bibtex-Datei wird empfohlen darauf zu achten, dass die DOI aufgeführt wird.
%
%%%

@Book{WSPA,
  author    = {Sanjiva Weerawarana and Francisco Curbera and Frank Leymann and Tony Storey and Donald F. Ferguson},
  title     = {Web Services Platform Architecture : SOAP, WSDL, WS-Policy, WS-Addressing, WS-BPEL, WS-Reliable Messaging, and More},
  year      = {2005},
  publisher = {Prentice Hall PTR},
  isbn      = {0131488740},
  doi       = {10.1.1/jpb001}
}

@book{DBMSbook,
author = {Ramakrishnan, Raghu and Gehrke, Johannes},
title = {Database Management Systems},
year = {2000},
isbn = {0072440422},
publisher = {McGraw-Hill, Inc.},
address = {USA},
edition = {2nd}
}


@Misc{jepsonio,
  author = {{Kyle Kingsbury}},
  title =  {Jepsen io Website},
  year =   {2016},
  url =    {https://jepsen.io/}
}

@Misc{aphyrpostgres,
  author = {{Kyle Kingsbury}},
  title =  {Aphyr, Jepsen test postgres.},
  year =   {2013},
  url =    {https://aphyr.com/posts/282-jepsen-postgres}
  }


@article{10.14778/2732232.2732237,
author = {Bailis, Peter and Davidson, Aaron and Fekete, Alan and Ghodsi, Ali and Hellerstein, Joseph M. and Stoica, Ion},
title = {Highly Available Transactions: Virtues and Limitations},
year = {2013},
issue_date = {November 2013},
publisher = {VLDB Endowment},
volume = {7},
number = {3},
issn = {2150-8097},
url = {https://doi.org/10.14778/2732232.2732237},
doi = {10.14778/2732232.2732237},
abstract = {To minimize network latency and remain online during server failures and network partitions,
many modern distributed data storage systems eschew transactional functionality, which
provides strong semantic guarantees for groups of multiple operations over multiple
data items. In this work, we consider the problem of providing Highly Available Transactions
(HATs): transactional guarantees that do not suffer unavailability during system partitions
or incur high network latency. We introduce a taxonomy of highly available systems
and analyze existing ACID isolation and distributed data consistency guarantees to
identify which can and cannot be achieved in HAT systems. This unifies the literature
on weak transactional isolation, replica consistency, and highly available systems.
We analytically and experimentally quantify the availability and performance benefits
of HATs---often two to three orders of magnitude over wide-area networks---and discuss
their necessary semantic compromises.},
journal = {Proc. VLDB Endow.},
month = nov,
pages = {181–192},
numpages = {12}
}


@article{10.1145/78969.78972,
author = {Herlihy, Maurice P. and Wing, Jeannette M.},
title = {Linearizability: A Correctness Condition for Concurrent Objects},
year = {1990},
issue_date = {July 1990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {3},
issn = {0164-0925},
url = {https://doi.org/10.1145/78969.78972},
doi = {10.1145/78969.78972},
abstract = {A concurrent object is a data object shared by concurrent processes. Linearizability
is a correctness condition for concurrent objects that exploits the semantics of abstract
data types. It permits a high degree of concurrency, yet it permits programmers to
specify and reason about concurrent objects using known techniques from the sequential
domain. Linearizability provides the illusion that each operation applied by concurrent
processes takes effect instantaneously at some point between its invocation and its
response, implying that the meaning of a concurrent object's operations can be given
by pre- and post-conditions. This paper defines linearizability, compares it to other
correctness conditions, presents and demonstrates a method for proving the correctness
of implementations, and shows how to reason about concurrent objects, given they are
linearizable.},
journal = {ACM Trans. Program. Lang. Syst.},
month = jul,
pages = {463–492},
numpages = {30}
}


@Misc{Knossos,
  author = {{Kyle Kingsbury}},
  title =  {knosso git repo},
  year =   {2013-2019},
  url =    {https://github.com/jepsen-io/knosso}
}

@Standard{ansisql1999,
  author = {{ISO/IEC}},
  title =  {ISO/IEC 9075-2:1999 (E)},
  issue_date =   {September 1999},
  url =    {http://web.cecs.pdx.edu/~len/sql1999.pdf}
}



@ARTICLE{Haerder83principlesof,
    author = {Theo Haerder and Andreas Reuter},
    title = {Principles of Transaction-Oriented Database Recovery},
    journal = {ACM Computing Surveys},
    year = {1983},
    volume = {15},
    pages = {287--317}
}


@REPORT{CSL-TR-95-685,
    author = {Kourosh Gharachorloo},
    title = {MEMORY CONSISTENCY MODELS FOR SHARED-MEMORY MULTIPROCESSORS},
    publisher = {DARPA contract N00039-91-C-0138},
    organization={CSR, Stanford University},
    year = {1995},
    url = {http://i.stanford.edu/pub/cstr/reports/csl/tr/95/685/CSL-TR-95-685.pdf}
}

@article{CAP,
author = {Gilbert, Seth and Lynch, Nancy},
title = {Brewer's Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services},
year = {2002},
issue_date = {June 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {33},
number = {2},
issn = {0163-5700},
url = {https://doi.org/10.1145/564585.564601},
doi = {10.1145/564585.564601},
abstract = {When designing distributed web services, there are three properties that are commonly
desired: consistency, availability, and partition tolerance. It is impossible to achieve
all three. In this note, we prove this conjecture in the asynchronous network model,
and then discuss solutions to this dilemma in the partially synchronous model.},
journal = {SIGACT News},
month = jun,
pages = {51–59},
numpages = {9}
}

@inproceedings{brewer2000towards,
  title={Towards robust distributed systems},
  author={Brewer, Eric A},
  year={2000},
  url = {https://sites.cs.ucsb.edu/~rich/class/cs293b-cloud/papers/Brewer_podc_keynote_2000.pdf},
  organization={UC Berkeley}
}

@Article{lamport1993how,
author = {Lamport, Leslie},
title = {How to Make a Correct Multiprocess Program Execute Correctly on a Multiprocessor},
year = {1993},
month = {February},
abstract = {This paper was inspired by Kourosh Gharachorloo's thesis. The problem he addressed was how to execute a multiprocess program on a computer whose memory did not provide sequential consistency (see [35]), but instead required explicit synchronization operations (such as Alpha's memory barrier instruction). He presented a method for deducing what synchronization operations had to be added to a program. I realized that, if one proved the correctness of an algorithm using the two-arrow formalism of [33], the proof would tell you what synchronization operations were necessary. This paper explains how.},
url = {https://www.microsoft.com/en-us/research/publication/make-correct-multiprocess-program-execute-correctly-multiprocessor/},
pages = {779-782},
journal = {IEEE Transactions on Computers  SRC Research Report 96},
volume = {46},
edition = {Also appeared as SRC Research Report 96},
number = {7},
}



%G. Lowe. Testing and Verifying Concurrent Objects.
%Concurrency and Computation: Practice and
%Experience, 29(4), 2017
%
%J. M. Wing and C. Gong. Testing and Verifying
%Concurrent Objects. Journal of Parallel and
%Distributed Computing, 17(1-2), 1993.
%
%P. B. Gibbons and E. Korach. Testing shared
%memories. SIAM Journal on Computing, 26(4), 1997
%
%S. Burckhardt, C. Dern, M. Musuvathi, and R. Tan.
%Line-up: A Complete and Automatic Linearizability
%Checker. PLDI ’10, 2010.
